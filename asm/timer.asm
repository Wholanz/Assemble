DATA SEGMENT 'DATA'
	PROMPT DB 'PRESS ENTER TO EXIT OR ANY OTHER KEY TO TRANSFER',13,10,'$'
DATA ENDS

STACK SEGMENT STACK

STACK ENDS

CODE SEGMENT 'CODE'
	ASSUME DS:DATA, SS:STACK, ES:DATA, CS:CODE
MAIN PROC FAR
	MOV AX, DATA
	MOV DS, AX
	MOV ES, AX


	MOV DX, 0DE23H
	MOV AL, 00010110B
	OUT DX, AL
	MOV AL, 01010110B
	OUT DX, AL
	MOV AL, 10010100B
	OUT DX, AL
	
	MOV DX, 0DE20H
	MOV AL, 250
	OUT DX, AL
	MOV DX, 0DE21H
	MOV AL, 125
	OUT DX, AL
	MOV DX, 0DE22H
	MOV AL, 250
	OUT DX, AL
	
OUTPUT:	
	MOV AH, 0BH
	INT 21H
	CMP AL, 0FFH
	JE EXIT
	
	MOV DX, 0DE20H
	IN  AL, DX
	CMP AL, BL
	JE  OUTPUT
	MOV BL, AL
	MOV AH, 0
	CALL PRINT
	JMP OUTPUT
	
EXIT:

	MOV AH, 4CH
	INT 21H
MAIN ENDP

PRINT PROC NEAR
	MOV CX, 3		;Loop 3 times to output the number string
	MOV BX, 10		;Divide 10 to get a decimal number remainder
	MOV DX, 0
	
TO_ASCII:			;Change the value to string, which represent a decimal number
	DIV BX
	PUSH DX
	MOV DX, 0
	LOOP TO_ASCII

	MOV CX, 3
ASCII:
	POP BX
	ADD BX, '0'

	MOV DX, BX
	MOV AH, 02H
    INT 21H

	LOOP ASCII
	MOV DX, 13
	INT 21H
	
	RET
PRINT ENDP

CODE ENDS

END MAIN